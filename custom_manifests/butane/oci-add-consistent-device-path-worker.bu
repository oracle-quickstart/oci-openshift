variant: openshift
version: 4.16.0
metadata:
  name: 00-worker-oci-add-consistent-device-path
  labels:
    machineconfiguration.openshift.io/role: worker
storage:
  files:
  - mode: 0777
    path: "/etc/udev/rules.d/99-systemoci-persistent-names.rules"
    contents:
      inline: |
        # Oracle Cloud Infrastructure. Please do not remove

        # We use DEVPATH and ID_PATH variables to determine the LUN# for iSCSI/PV based and NSID attr for NVMe based
        # The conversion from LUN# or NSID to friendly device name is simple-
        # The format is /dev/oracleoci/oraclevdxx
        # 2 becomes /dev/oracleoci/oraclevdb, 3 becomes /dev/oracleoci/oraclevdc and so on.
        # The boot volumes are provided the device name of /dev/oracleoci/oraclevda.

        KERNEL=="sd*", SUBSYSTEM=="block", ENV{DEVTYPE}=="disk", PROGRAM="/etc/ociudevpersistentnaming %k", SYMLINK+="%c"
        KERNEL=="sd*", SUBSYSTEM=="block", ENV{DEVTYPE}=="partition", PROGRAM="/etc/ociudevpersistentnaming %k", SYMLINK+="%c"
  - mode: 0777
    path: "/etc/ociudevpersistentnaming"
    contents:
      inline: |
        #!/bin/bash

        # Script to create symlinks in devices that is based on LUN IDs.
        # Link vda always points to the root device.
        # This script works only for iSCSI attachments (Beta release for PSM)

        # If number of parameters being sent to this script is not equal to 1
        # , we throw an error. We expect the kernel device name like "sda", "sdb" etc.
        if [ "$#" -ne 1 ]; then
          echo "invalid <device>" >&2
          exit 1
        fi

        if [[ "$DEVPATH" = *"virtio"* ]]; then
          # Using ID_PATH to retrieve the LU #
          # ID_PATH is virtio-pci-0000:00:04.0-scsi-0:0:2:12
          # With the substitution, we would be able to get 12 which is the LUN number.
          LUN=$(echo "$ID_PATH" | sed 's/.*://')
        else
          # Using DEVPATH to retrieve the LUN #
          # DEVPATH is /devices/platform/host5/session3/target5:0:0/5:0:0:12/block/sdc
          # With first substitution, the string becomes 12/block/sdc
          # With second substitution, the string becomes 12/
          # With third substitution, the last character is removed and we are able to retrieve
          # the LUN number which is 12.
          LUN=$(echo "$DEVPATH" | sed 's/.*://' | sed 's/\([/]\).*/\1/' | sed s'/.$//')
        fi

        if [ x"$LUN" = "x" ]; then
          exit 1
        fi

        # We can use ID_PATH to figure out iSCSI boot volumes
        # ID_PATH is ip-169.254.0.2:3260-iscsi-iqn.2015-02.oracle.boot:uefi-lun-1
        # After the substitution, we get uefi-lun-1
        BOOTLUN=${ID_PATH//.*://}
        #BOOTLUN=$(echo "$ID_PATH" |sed 's/.*://')
        # iSCSI boot volumes are recognized with uefi-lun-1
        if [[ "$BOOTLUN" = *"uefi-lun-1"* ]]; then
          echo "$1" | sed 's#sd[a-z]*[a-z]#oracleoci/oraclevda#g'
          exit 0
        fi

        # In case of PV Boot volume, the ID_PATH is virtio-pci-0000:00:04.0-scsi-0:0:0:1
        # By applying the substitution, we get the LUN number as 1
        # 1 is special case reserved for boot volumes.
        if [ "$BOOTLUN" = "1" ]; then
                echo "$1" | sed 's#sd[a-z]*[a-z]#oracleoci/oraclevda#g'
                exit 0
        fi

        # Test to ensure $LUN is a number
        re='^[0-9]+$'
        if ! [[ "$LUN" =~ $re ]] ; then
          exit 1
        fi

        # We allow a maximum device name to be vdzz - corresponding to LUN=702 (26 + (26 * 26))
        if [ "$LUN" -gt "702" ]; then
          exit 1
        fi

        # We don't allow the LUN # to be less than 1
        if [ "$LUN" -le "0" ]; then
          exit 1
        fi

        # If the IQN of the incoming device matches the one
        # persisted on the filesystem, exit with failure
        FNAME=$(echo "$ID_PATH" | sed 's/.*iscsi-//' | sed 's/-lun-.*//')
        if [ -f "/var/log/oracle-cloud-agent/plugins/oci-blockautoconfig/$FNAME" ]; then
          echo "This is a path to a multipath device. Skipping symlink creation"
          exit 1
        fi

        # Converts a number to ASCII char
        chr() {
          printf \\$(printf '%03o' "$1")
        }

        # Construct a 2 letter suffix using the LUN ID.
        # 2 means vdb, 3 means vdc and so on
        # 27 means vdaa and so on.
        LETTER1=$((LUN/26))
        LETTER2=$(((LUN - (LETTER1 * 26)) % 26))

        if [ "$LETTER2" -eq 0 ]; then
          LETTER2='z'
            if [ "$LETTER1" -eq 1 ]; then
                LETTER1=''
            else
                LETTER1=$(chr $((LETTER1 + 95)))
            fi
        else
          LETTER2=$(chr $((LETTER2 + 96)))
          if [ "$LETTER1" -eq 0 ]; then
                LETTER1=''
            else
                LETTER1=$(chr $((LETTER1 + 96)))
            fi
        fi

        SUFFIX="$LETTER1$LETTER2"

        echo "$1" | sed "s#sd[a-z]*[a-z]#oracleoci/oraclevd$SUFFIX#g"
        exit 0
